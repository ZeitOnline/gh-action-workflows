name: Test & push
on:
  workflow_call:
    inputs:
      service:
        required: false
        type: string
        default: backend
      project:
        required: false
        type: string
      targets:
        required: false
        type: string
      versions:
        required: false
        type: string
      compose_file:
        required: false
        type: string
        default: testing.yaml
      compose_args:
        required: false
        type: string
      test_args:
        required: false
        type: string
        default: --verbose --junitxml=/testing/junit.xml
      artifacts:
        required: false
        type: string
env:
  COMPOSE_FILE: ${{ inputs.compose_file }}
jobs:
  test-and-push:
    name: Test and push docker images
    runs-on: [self-hosted, x64, linux, ephemeral, zon-image-latest]
    permissions:
      id-token: write
      contents: write
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Build images
        run: |
          docker compose build ${{ inputs.service }}
      - name: Run tests
        run: |
          docker compose run --rm ${{ inputs.compose_args }} ${{ inputs.service }} \
            -- ${{ inputs.test_args }}
      - name: Publish test result
        uses: enricomi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: testing/junit.xml
          comment_mode: "off"
      - name: Extract build artifacts
        if: inputs.artifacts
        run: |
          docker compose run --rm --entrypoint "tar cvv ${{ inputs.artifacts }}/" ${{ inputs.service }} | tar x
      - name: Store build artifacts
        if: inputs.artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ inputs.artifacts }}*
      - name: Set variables
        id: vars
        run: |
          input="${{ inputs.project }}"
          repository="${{ github.repository }}"
          default="${repository##*/}"
          project="${input:-$default}"
          echo "project=$project" >> "$GITHUB_ENV"
          echo "prefix=${{ vars.GAR_DOCKER_REGISTRY }}/$project" >> "$GITHUB_ENV"
          echo "describe=$( git describe --tags )" >> "$GITHUB_ENV"
      - name: Setup auth
        id: baseproject
        uses: ZeitOnline/gh-action-baseproject@v0
        if: inputs.targets
        with:
          project_name: ${{ env.project }}
          environment: production     # needs 'production' service account
          gar_docker_auth: true
      - name: Publish images
        if: inputs.targets
        run: |
          for target in ${{ inputs.targets }}; do
            tag="${{ env.prefix }}-$target:${{ env.describe }}"
            docker build --target $target --tag $tag .
            docker push $tag
          done
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        if: inputs.versions
        with:
          gpg_private_key: ${{ secrets.ZON_OPS_GPG_KEY_PRIVATE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
        if: inputs.versions
      - name: Pull recent changes
        if: ${{ inputs.versions && github.ref_type == 'branch' }}
        run: |
          git pull
      - name: Set image tags
        if: inputs.versions
        run: |
          cd ${{ inputs.versions }}
          for target in ${{ inputs.targets }}; do
            kustomize edit set image $target:${{ env.describe }}
          done
      - name: Commit and push image tags
        if: inputs.versions
        run: |
          git commit -am "Update image versions"
          git push
